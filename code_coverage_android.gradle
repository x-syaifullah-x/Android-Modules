apply plugin: "jacoco"

/*
    running :   ./gradlew :module_name:debugCodeCoverage
    result  :   build/jacoco_code_coverage/${project.name}/debugCodeCoverage/html/index.html
*/

jacoco {
    toolVersion = "$vJacoco"
    reportsDirectory = rootProject.layout.buildDirectory.dir("jacoco_code_coverage/${project.displayName.replace("project ':", "/").replace(":","/").replace("'","")}")
}

android {
    buildTypes {
        debug {
            enableAndroidTestCoverage true
            enableUnitTestCoverage true
        }
    }
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->

        def variantName = variant.name
        def testVariantNameCodeCoverageTask = "${variantName}CodeCoverage"
        tasks.register("${testVariantNameCodeCoverageTask}", JacocoReport) {
            dependsOn = [
                    "testDebugUnitTest",
                    "connectedDebugAndroidTest"
            ]
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"
            reports { html.required.set(true) }
            def fileFilter = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    '**/com/example/databinding/*',
                    '**/com/example/generated/callback/*',
                    '**/android/databinding/*',
                    '**/androidx/databinding/*',
                    '**/di/module/*',
                    '**/*MapperImpl*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/*Component*.*',
                    '**/*BR*.*',
                    '**/*Module.*', /* filtering Dagger modules classes */
                    '**/*Dagger*.*',/* filtering Dagger-generated classes */
                    '**/*MembersInjector*.*',
                    '**/*_Factory*.*',
                    '**/*_Provide*Factory*.*',
                    '**/*Args*.*', /* filtering Navigation Component generated classes */
                    '**/*Directions*.*' /* filtering Navigation Component generated classes */,
//                    '**/*$Lambda$*.*',
//                    '**/*Companion*.*',
//                    '**/*Extensions*.*',
//                    '**/*$Result.*', /* filtering `sealed` and `data` classes */
//                    '**/*$Result$*.*',/* filtering `sealed` and `data` classes */
            ]

            classDirectories.setFrom(files([
                    fileTree(dir: { layout.buildDirectory.dir("intermediates/debug") }, excludes: fileFilter),
                    fileTree(dir: { layout.buildDirectory.dir("tmp/java-classes/debug") }, excludes: fileFilter),
                    fileTree(dir: { layout.buildDirectory.dir("tmp/kotlin-classes/debug") }, excludes: fileFilter),
            ]))
            def coverageSourceDirs = files([
                    layout.projectDirectory.dir("src/main/java"),
                    layout.projectDirectory.dir("src/main/kotlin")
            ])
            additionalSourceDirs.setFrom(coverageSourceDirs)
            sourceDirectories.setFrom(coverageSourceDirs)
            executionData.setFrom(files(fileTree(layout.buildDirectory) { include(["**/*.exec", "**/*.ec"]) }))
        }
    }
}